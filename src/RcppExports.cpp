// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppEigen.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// assignment_squared_euclidean_toms1015_cpp
Rcpp::List assignment_squared_euclidean_toms1015_cpp(const Eigen::Map<Eigen::MatrixXd>& x, const Eigen::Map<Eigen::MatrixXd>& y, const bool& estimate_epsilon);
RcppExport SEXP _wassersteinbound_assignment_squared_euclidean_toms1015_cpp(SEXP xSEXP, SEXP ySEXP, SEXP estimate_epsilonSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::MatrixXd>& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::MatrixXd>& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const bool& >::type estimate_epsilon(estimate_epsilonSEXP);
    rcpp_result_gen = Rcpp::wrap(assignment_squared_euclidean_toms1015_cpp(x, y, estimate_epsilon));
    return rcpp_result_gen;
END_RCPP
}
// assignment_squared_euclidean_networkflow_cpp
Rcpp::List assignment_squared_euclidean_networkflow_cpp(const Eigen::Map<Eigen::MatrixXd>& x, const Eigen::Map<Eigen::MatrixXd>& y, const bool& compute_assignment);
RcppExport SEXP _wassersteinbound_assignment_squared_euclidean_networkflow_cpp(SEXP xSEXP, SEXP ySEXP, SEXP compute_assignmentSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::MatrixXd>& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::MatrixXd>& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const bool& >::type compute_assignment(compute_assignmentSEXP);
    rcpp_result_gen = Rcpp::wrap(assignment_squared_euclidean_networkflow_cpp(x, y, compute_assignment));
    return rcpp_result_gen;
END_RCPP
}
// assignment_squared_euclidean_jackknife_cpp
Rcpp::List assignment_squared_euclidean_jackknife_cpp(const Eigen::Map<Eigen::MatrixXd>& x, const Eigen::Map<Eigen::MatrixXd>& y, const bool& estimate_epsilon);
RcppExport SEXP _wassersteinbound_assignment_squared_euclidean_jackknife_cpp(SEXP xSEXP, SEXP ySEXP, SEXP estimate_epsilonSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::MatrixXd>& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::MatrixXd>& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const bool& >::type estimate_epsilon(estimate_epsilonSEXP);
    rcpp_result_gen = Rcpp::wrap(assignment_squared_euclidean_jackknife_cpp(x, y, estimate_epsilon));
    return rcpp_result_gen;
END_RCPP
}
// assignment_squared_euclidean_jackknife_1d_cpp
Rcpp::List assignment_squared_euclidean_jackknife_1d_cpp(const Rcpp::NumericVector& x_sorted, const Rcpp::NumericVector& y_sorted, const Rcpp::IntegerVector& inv_order_x, const Rcpp::IntegerVector& inv_order_y);
RcppExport SEXP _wassersteinbound_assignment_squared_euclidean_jackknife_1d_cpp(SEXP x_sortedSEXP, SEXP y_sortedSEXP, SEXP inv_order_xSEXP, SEXP inv_order_ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type x_sorted(x_sortedSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type y_sorted(y_sortedSEXP);
    Rcpp::traits::input_parameter< const Rcpp::IntegerVector& >::type inv_order_x(inv_order_xSEXP);
    Rcpp::traits::input_parameter< const Rcpp::IntegerVector& >::type inv_order_y(inv_order_ySEXP);
    rcpp_result_gen = Rcpp::wrap(assignment_squared_euclidean_jackknife_1d_cpp(x_sorted, y_sorted, inv_order_x, inv_order_y));
    return rcpp_result_gen;
END_RCPP
}
// EvaluateSquaredCost
Eigen::MatrixXd EvaluateSquaredCost(const Eigen::Map<Eigen::MatrixXd>& x, const Eigen::Map<Eigen::MatrixXd>& y);
RcppExport SEXP _wassersteinbound_EvaluateSquaredCost(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::MatrixXd>& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::MatrixXd>& >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(EvaluateSquaredCost(x, y));
    return rcpp_result_gen;
END_RCPP
}
// gibbs_periodicAR1_cpp
Rcpp::List gibbs_periodicAR1_cpp(const Eigen::Map<Eigen::ArrayXd>& x0, const double& sd, const double& c, const int& iter, const int& thin);
RcppExport SEXP _wassersteinbound_gibbs_periodicAR1_cpp(SEXP x0SEXP, SEXP sdSEXP, SEXP cSEXP, SEXP iterSEXP, SEXP thinSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::ArrayXd>& >::type x0(x0SEXP);
    Rcpp::traits::input_parameter< const double& >::type sd(sdSEXP);
    Rcpp::traits::input_parameter< const double& >::type c(cSEXP);
    Rcpp::traits::input_parameter< const int& >::type iter(iterSEXP);
    Rcpp::traits::input_parameter< const int& >::type thin(thinSEXP);
    rcpp_result_gen = Rcpp::wrap(gibbs_periodicAR1_cpp(x0, sd, c, iter, thin));
    return rcpp_result_gen;
END_RCPP
}
// gibbs_periodicAR1_CRN_cpp
Rcpp::List gibbs_periodicAR1_CRN_cpp(const Eigen::Map<Eigen::ArrayXd>& x0, const Eigen::Map<Eigen::ArrayXd>& y0, const double& sd, const double& c, const int& iter, const int& thin);
RcppExport SEXP _wassersteinbound_gibbs_periodicAR1_CRN_cpp(SEXP x0SEXP, SEXP y0SEXP, SEXP sdSEXP, SEXP cSEXP, SEXP iterSEXP, SEXP thinSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::ArrayXd>& >::type x0(x0SEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::ArrayXd>& >::type y0(y0SEXP);
    Rcpp::traits::input_parameter< const double& >::type sd(sdSEXP);
    Rcpp::traits::input_parameter< const double& >::type c(cSEXP);
    Rcpp::traits::input_parameter< const int& >::type iter(iterSEXP);
    Rcpp::traits::input_parameter< const int& >::type thin(thinSEXP);
    rcpp_result_gen = Rcpp::wrap(gibbs_periodicAR1_CRN_cpp(x0, y0, sd, c, iter, thin));
    return rcpp_result_gen;
END_RCPP
}
// gibbs_periodicAR1_ReflMax_cpp
Rcpp::List gibbs_periodicAR1_ReflMax_cpp(const Eigen::Map<Eigen::ArrayXd>& x0, const Eigen::Map<Eigen::ArrayXd>& y0, const double& sd, const double& c, const int& iter, const int& thin);
RcppExport SEXP _wassersteinbound_gibbs_periodicAR1_ReflMax_cpp(SEXP x0SEXP, SEXP y0SEXP, SEXP sdSEXP, SEXP cSEXP, SEXP iterSEXP, SEXP thinSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::ArrayXd>& >::type x0(x0SEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::ArrayXd>& >::type y0(y0SEXP);
    Rcpp::traits::input_parameter< const double& >::type sd(sdSEXP);
    Rcpp::traits::input_parameter< const double& >::type c(cSEXP);
    Rcpp::traits::input_parameter< const int& >::type iter(iterSEXP);
    Rcpp::traits::input_parameter< const int& >::type thin(thinSEXP);
    rcpp_result_gen = Rcpp::wrap(gibbs_periodicAR1_ReflMax_cpp(x0, y0, sd, c, iter, thin));
    return rcpp_result_gen;
END_RCPP
}
// low_inc_gamma_cpp
Rcpp::NumericVector low_inc_gamma_cpp(const double& rate, const Rcpp::NumericVector& upper_truncation);
RcppExport SEXP _wassersteinbound_low_inc_gamma_cpp(SEXP rateSEXP, SEXP upper_truncationSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const double& >::type rate(rateSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type upper_truncation(upper_truncationSEXP);
    rcpp_result_gen = Rcpp::wrap(low_inc_gamma_cpp(rate, upper_truncation));
    return rcpp_result_gen;
END_RCPP
}
// low_inc_gamma_inv_cpp
Rcpp::NumericVector low_inc_gamma_inv_cpp(const double& rate, const Rcpp::NumericVector& p);
RcppExport SEXP _wassersteinbound_low_inc_gamma_inv_cpp(SEXP rateSEXP, SEXP pSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const double& >::type rate(rateSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type p(pSEXP);
    rcpp_result_gen = Rcpp::wrap(low_inc_gamma_inv_cpp(rate, p));
    return rcpp_result_gen;
END_RCPP
}
// cpp_prod
Eigen::MatrixXd cpp_prod(const Eigen::Map<Eigen::MatrixXd>& X, const Eigen::Map<Eigen::MatrixXd>& Y);
RcppExport SEXP _wassersteinbound_cpp_prod(SEXP XSEXP, SEXP YSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::MatrixXd>& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::MatrixXd>& >::type Y(YSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_prod(X, Y));
    return rcpp_result_gen;
END_RCPP
}
// cpp_crossprod
Eigen::MatrixXd cpp_crossprod(const Eigen::Map<Eigen::MatrixXd>& X);
RcppExport SEXP _wassersteinbound_cpp_crossprod(SEXP XSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::MatrixXd>& >::type X(XSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_crossprod(X));
    return rcpp_result_gen;
END_RCPP
}
// cpp_cov
Eigen::MatrixXd cpp_cov(const Eigen::Map<Eigen::MatrixXd>& X);
RcppExport SEXP _wassersteinbound_cpp_cov(SEXP XSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::MatrixXd>& >::type X(XSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_cov(X));
    return rcpp_result_gen;
END_RCPP
}
// SetSeed_pcg32
void SetSeed_pcg32(const int& seed, const int& stream);
RcppExport SEXP _wassersteinbound_SetSeed_pcg32(SEXP seedSEXP, SEXP streamSEXP) {
BEGIN_RCPP
    Rcpp::traits::input_parameter< const int& >::type seed(seedSEXP);
    Rcpp::traits::input_parameter< const int& >::type stream(streamSEXP);
    SetSeed_pcg32(seed, stream);
    return R_NilValue;
END_RCPP
}
// rwm_cpp
Rcpp::List rwm_cpp(const Rcpp::List& target_params, const Rcpp::List& sampler_params, const Eigen::Map<Eigen::VectorXd>& theta0, const int& iter, const int& thin);
RcppExport SEXP _wassersteinbound_rwm_cpp(SEXP target_paramsSEXP, SEXP sampler_paramsSEXP, SEXP theta0SEXP, SEXP iterSEXP, SEXP thinSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const Rcpp::List& >::type target_params(target_paramsSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type sampler_params(sampler_paramsSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::VectorXd>& >::type theta0(theta0SEXP);
    Rcpp::traits::input_parameter< const int& >::type iter(iterSEXP);
    Rcpp::traits::input_parameter< const int& >::type thin(thinSEXP);
    rcpp_result_gen = Rcpp::wrap(rwm_cpp(target_params, sampler_params, theta0, iter, thin));
    return rcpp_result_gen;
END_RCPP
}
// mala_cpp
Rcpp::List mala_cpp(const Rcpp::List& target_params, const Rcpp::List& sampler_params, const Eigen::Map<Eigen::VectorXd>& theta0, const int& iter, const int& thin);
RcppExport SEXP _wassersteinbound_mala_cpp(SEXP target_paramsSEXP, SEXP sampler_paramsSEXP, SEXP theta0SEXP, SEXP iterSEXP, SEXP thinSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const Rcpp::List& >::type target_params(target_paramsSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type sampler_params(sampler_paramsSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::VectorXd>& >::type theta0(theta0SEXP);
    Rcpp::traits::input_parameter< const int& >::type iter(iterSEXP);
    Rcpp::traits::input_parameter< const int& >::type thin(thinSEXP);
    rcpp_result_gen = Rcpp::wrap(mala_cpp(target_params, sampler_params, theta0, iter, thin));
    return rcpp_result_gen;
END_RCPP
}
// ula_cpp
Rcpp::List ula_cpp(const Rcpp::List& target_params, const Rcpp::List& sampler_params, const Eigen::Map<Eigen::VectorXd>& theta0, const int& iter, const int& thin);
RcppExport SEXP _wassersteinbound_ula_cpp(SEXP target_paramsSEXP, SEXP sampler_paramsSEXP, SEXP theta0SEXP, SEXP iterSEXP, SEXP thinSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const Rcpp::List& >::type target_params(target_paramsSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type sampler_params(sampler_paramsSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::VectorXd>& >::type theta0(theta0SEXP);
    Rcpp::traits::input_parameter< const int& >::type iter(iterSEXP);
    Rcpp::traits::input_parameter< const int& >::type thin(thinSEXP);
    rcpp_result_gen = Rcpp::wrap(ula_cpp(target_params, sampler_params, theta0, iter, thin));
    return rcpp_result_gen;
END_RCPP
}
// obab_cpp
Rcpp::List obab_cpp(const Rcpp::List& target_params, const Rcpp::List& sampler_params, const Eigen::Map<Eigen::VectorXd>& x0, const int& iter, const int& thin);
RcppExport SEXP _wassersteinbound_obab_cpp(SEXP target_paramsSEXP, SEXP sampler_paramsSEXP, SEXP x0SEXP, SEXP iterSEXP, SEXP thinSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const Rcpp::List& >::type target_params(target_paramsSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type sampler_params(sampler_paramsSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::VectorXd>& >::type x0(x0SEXP);
    Rcpp::traits::input_parameter< const int& >::type iter(iterSEXP);
    Rcpp::traits::input_parameter< const int& >::type thin(thinSEXP);
    rcpp_result_gen = Rcpp::wrap(obab_cpp(target_params, sampler_params, x0, iter, thin));
    return rcpp_result_gen;
END_RCPP
}
// horowitz_cpp
Rcpp::List horowitz_cpp(const Rcpp::List& target_params, const Rcpp::List& sampler_params, const Eigen::Map<Eigen::VectorXd>& x0, const int& iter, const int& thin);
RcppExport SEXP _wassersteinbound_horowitz_cpp(SEXP target_paramsSEXP, SEXP sampler_paramsSEXP, SEXP x0SEXP, SEXP iterSEXP, SEXP thinSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const Rcpp::List& >::type target_params(target_paramsSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type sampler_params(sampler_paramsSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::VectorXd>& >::type x0(x0SEXP);
    Rcpp::traits::input_parameter< const int& >::type iter(iterSEXP);
    Rcpp::traits::input_parameter< const int& >::type thin(thinSEXP);
    rcpp_result_gen = Rcpp::wrap(horowitz_cpp(target_params, sampler_params, x0, iter, thin));
    return rcpp_result_gen;
END_RCPP
}
// fisher_mala_cpp
Rcpp::List fisher_mala_cpp(const Rcpp::List& target_params, const Rcpp::List& sampler_params, const Eigen::Map<Eigen::VectorXd>& x0, const int& iter, const int& thin);
RcppExport SEXP _wassersteinbound_fisher_mala_cpp(SEXP target_paramsSEXP, SEXP sampler_paramsSEXP, SEXP x0SEXP, SEXP iterSEXP, SEXP thinSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const Rcpp::List& >::type target_params(target_paramsSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type sampler_params(sampler_paramsSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::VectorXd>& >::type x0(x0SEXP);
    Rcpp::traits::input_parameter< const int& >::type iter(iterSEXP);
    Rcpp::traits::input_parameter< const int& >::type thin(thinSEXP);
    rcpp_result_gen = Rcpp::wrap(fisher_mala_cpp(target_params, sampler_params, x0, iter, thin));
    return rcpp_result_gen;
END_RCPP
}
// rwm_twoscalegcrn_cpp
Rcpp::List rwm_twoscalegcrn_cpp(const Rcpp::List& target_params, const Rcpp::List& sampler_params, const Eigen::Map<Eigen::VectorXd>& x0, const Eigen::Map<Eigen::VectorXd>& y0, const int& iter, const int& thin);
RcppExport SEXP _wassersteinbound_rwm_twoscalegcrn_cpp(SEXP target_paramsSEXP, SEXP sampler_paramsSEXP, SEXP x0SEXP, SEXP y0SEXP, SEXP iterSEXP, SEXP thinSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const Rcpp::List& >::type target_params(target_paramsSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type sampler_params(sampler_paramsSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::VectorXd>& >::type x0(x0SEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::VectorXd>& >::type y0(y0SEXP);
    Rcpp::traits::input_parameter< const int& >::type iter(iterSEXP);
    Rcpp::traits::input_parameter< const int& >::type thin(thinSEXP);
    rcpp_result_gen = Rcpp::wrap(rwm_twoscalegcrn_cpp(target_params, sampler_params, x0, y0, iter, thin));
    return rcpp_result_gen;
END_RCPP
}
// ula_twoscalecrn_cpp
Rcpp::List ula_twoscalecrn_cpp(const Rcpp::List& target_params, const Rcpp::List& sampler_params, const Eigen::Map<Eigen::VectorXd>& x0, const Eigen::Map<Eigen::VectorXd>& y0, const int& iter, const int& thin);
RcppExport SEXP _wassersteinbound_ula_twoscalecrn_cpp(SEXP target_paramsSEXP, SEXP sampler_paramsSEXP, SEXP x0SEXP, SEXP y0SEXP, SEXP iterSEXP, SEXP thinSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const Rcpp::List& >::type target_params(target_paramsSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type sampler_params(sampler_paramsSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::VectorXd>& >::type x0(x0SEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::VectorXd>& >::type y0(y0SEXP);
    Rcpp::traits::input_parameter< const int& >::type iter(iterSEXP);
    Rcpp::traits::input_parameter< const int& >::type thin(thinSEXP);
    rcpp_result_gen = Rcpp::wrap(ula_twoscalecrn_cpp(target_params, sampler_params, x0, y0, iter, thin));
    return rcpp_result_gen;
END_RCPP
}
// mala_twoscalecrn_cpp
Rcpp::List mala_twoscalecrn_cpp(const Rcpp::List& target_params, const Rcpp::List& sampler_params, const Eigen::Map<Eigen::VectorXd>& x0, const Eigen::Map<Eigen::VectorXd>& y0, const int& iter, const int& thin);
RcppExport SEXP _wassersteinbound_mala_twoscalecrn_cpp(SEXP target_paramsSEXP, SEXP sampler_paramsSEXP, SEXP x0SEXP, SEXP y0SEXP, SEXP iterSEXP, SEXP thinSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const Rcpp::List& >::type target_params(target_paramsSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type sampler_params(sampler_paramsSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::VectorXd>& >::type x0(x0SEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::VectorXd>& >::type y0(y0SEXP);
    Rcpp::traits::input_parameter< const int& >::type iter(iterSEXP);
    Rcpp::traits::input_parameter< const int& >::type thin(thinSEXP);
    rcpp_result_gen = Rcpp::wrap(mala_twoscalecrn_cpp(target_params, sampler_params, x0, y0, iter, thin));
    return rcpp_result_gen;
END_RCPP
}
// horowitz_CRN_cpp
Rcpp::List horowitz_CRN_cpp(const Rcpp::List& target_params, const Rcpp::List& sampler_params, const Eigen::Map<Eigen::VectorXd>& x0, const Eigen::Map<Eigen::VectorXd>& y0, const int& iter, const int& thin);
RcppExport SEXP _wassersteinbound_horowitz_CRN_cpp(SEXP target_paramsSEXP, SEXP sampler_paramsSEXP, SEXP x0SEXP, SEXP y0SEXP, SEXP iterSEXP, SEXP thinSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const Rcpp::List& >::type target_params(target_paramsSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type sampler_params(sampler_paramsSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::VectorXd>& >::type x0(x0SEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::VectorXd>& >::type y0(y0SEXP);
    Rcpp::traits::input_parameter< const int& >::type iter(iterSEXP);
    Rcpp::traits::input_parameter< const int& >::type thin(thinSEXP);
    rcpp_result_gen = Rcpp::wrap(horowitz_CRN_cpp(target_params, sampler_params, x0, y0, iter, thin));
    return rcpp_result_gen;
END_RCPP
}
// obab_CRN_cpp
Rcpp::List obab_CRN_cpp(const Rcpp::List& target_params, const Rcpp::List& sampler_params, const Eigen::Map<Eigen::VectorXd>& x0, const Eigen::Map<Eigen::VectorXd>& y0, const int& iter, const int& thin);
RcppExport SEXP _wassersteinbound_obab_CRN_cpp(SEXP target_paramsSEXP, SEXP sampler_paramsSEXP, SEXP x0SEXP, SEXP y0SEXP, SEXP iterSEXP, SEXP thinSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const Rcpp::List& >::type target_params(target_paramsSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type sampler_params(sampler_paramsSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::VectorXd>& >::type x0(x0SEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::VectorXd>& >::type y0(y0SEXP);
    Rcpp::traits::input_parameter< const int& >::type iter(iterSEXP);
    Rcpp::traits::input_parameter< const int& >::type thin(thinSEXP);
    rcpp_result_gen = Rcpp::wrap(obab_CRN_cpp(target_params, sampler_params, x0, y0, iter, thin));
    return rcpp_result_gen;
END_RCPP
}
// ula_mala_CRN_cpp
Rcpp::List ula_mala_CRN_cpp(const Rcpp::List& target_params, const Rcpp::List& sampler_params, const Eigen::Map<Eigen::VectorXd>& x0, const Eigen::Map<Eigen::VectorXd>& y0, const int& iter, const int& thin);
RcppExport SEXP _wassersteinbound_ula_mala_CRN_cpp(SEXP target_paramsSEXP, SEXP sampler_paramsSEXP, SEXP x0SEXP, SEXP y0SEXP, SEXP iterSEXP, SEXP thinSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const Rcpp::List& >::type target_params(target_paramsSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type sampler_params(sampler_paramsSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::VectorXd>& >::type x0(x0SEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::VectorXd>& >::type y0(y0SEXP);
    Rcpp::traits::input_parameter< const int& >::type iter(iterSEXP);
    Rcpp::traits::input_parameter< const int& >::type thin(thinSEXP);
    rcpp_result_gen = Rcpp::wrap(ula_mala_CRN_cpp(target_params, sampler_params, x0, y0, iter, thin));
    return rcpp_result_gen;
END_RCPP
}
// obab_horowitz_CRN_cpp
Rcpp::List obab_horowitz_CRN_cpp(const Rcpp::List& target_params, const Rcpp::List& sampler_params, const Eigen::Map<Eigen::VectorXd>& x0, const Eigen::Map<Eigen::VectorXd>& y0, const int& iter, const int& thin);
RcppExport SEXP _wassersteinbound_obab_horowitz_CRN_cpp(SEXP target_paramsSEXP, SEXP sampler_paramsSEXP, SEXP x0SEXP, SEXP y0SEXP, SEXP iterSEXP, SEXP thinSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const Rcpp::List& >::type target_params(target_paramsSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type sampler_params(sampler_paramsSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::VectorXd>& >::type x0(x0SEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::VectorXd>& >::type y0(y0SEXP);
    Rcpp::traits::input_parameter< const int& >::type iter(iterSEXP);
    Rcpp::traits::input_parameter< const int& >::type thin(thinSEXP);
    rcpp_result_gen = Rcpp::wrap(obab_horowitz_CRN_cpp(target_params, sampler_params, x0, y0, iter, thin));
    return rcpp_result_gen;
END_RCPP
}
// mala_CRN_2targets_cpp
Rcpp::List mala_CRN_2targets_cpp(const Rcpp::List& target_x_params, const Rcpp::List& target_y_params, const Rcpp::List& sampler_params, const Eigen::Map<Eigen::VectorXd>& x0, const Eigen::Map<Eigen::VectorXd>& y0, const int& iter, const int& thin);
RcppExport SEXP _wassersteinbound_mala_CRN_2targets_cpp(SEXP target_x_paramsSEXP, SEXP target_y_paramsSEXP, SEXP sampler_paramsSEXP, SEXP x0SEXP, SEXP y0SEXP, SEXP iterSEXP, SEXP thinSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const Rcpp::List& >::type target_x_params(target_x_paramsSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type target_y_params(target_y_paramsSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type sampler_params(sampler_paramsSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::VectorXd>& >::type x0(x0SEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::VectorXd>& >::type y0(y0SEXP);
    Rcpp::traits::input_parameter< const int& >::type iter(iterSEXP);
    Rcpp::traits::input_parameter< const int& >::type thin(thinSEXP);
    rcpp_result_gen = Rcpp::wrap(mala_CRN_2targets_cpp(target_x_params, target_y_params, sampler_params, x0, y0, iter, thin));
    return rcpp_result_gen;
END_RCPP
}
// sgld_cpp
Rcpp::List sgld_cpp(const Rcpp::List& target_params, const Rcpp::List& sampler_params, const Eigen::Map<Eigen::VectorXd>& theta0, const int& iter, const int& thin);
RcppExport SEXP _wassersteinbound_sgld_cpp(SEXP target_paramsSEXP, SEXP sampler_paramsSEXP, SEXP theta0SEXP, SEXP iterSEXP, SEXP thinSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const Rcpp::List& >::type target_params(target_paramsSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type sampler_params(sampler_paramsSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::VectorXd>& >::type theta0(theta0SEXP);
    Rcpp::traits::input_parameter< const int& >::type iter(iterSEXP);
    Rcpp::traits::input_parameter< const int& >::type thin(thinSEXP);
    rcpp_result_gen = Rcpp::wrap(sgld_cpp(target_params, sampler_params, theta0, iter, thin));
    return rcpp_result_gen;
END_RCPP
}
// sgldcv_cpp
Rcpp::List sgldcv_cpp(const Rcpp::List& target_params, const Rcpp::List& sampler_params, const Eigen::Map<Eigen::VectorXd>& theta0, const int& iter, const int& thin);
RcppExport SEXP _wassersteinbound_sgldcv_cpp(SEXP target_paramsSEXP, SEXP sampler_paramsSEXP, SEXP theta0SEXP, SEXP iterSEXP, SEXP thinSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const Rcpp::List& >::type target_params(target_paramsSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type sampler_params(sampler_paramsSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::VectorXd>& >::type theta0(theta0SEXP);
    Rcpp::traits::input_parameter< const int& >::type iter(iterSEXP);
    Rcpp::traits::input_parameter< const int& >::type thin(thinSEXP);
    rcpp_result_gen = Rcpp::wrap(sgldcv_cpp(target_params, sampler_params, theta0, iter, thin));
    return rcpp_result_gen;
END_RCPP
}
// sgld_mala_CRN_cpp
Rcpp::List sgld_mala_CRN_cpp(const Rcpp::List& target_params, const Rcpp::List& sampler_params, const Eigen::Map<Eigen::VectorXd>& x0, const Eigen::Map<Eigen::VectorXd>& y0, const int& iter, const int& thin);
RcppExport SEXP _wassersteinbound_sgld_mala_CRN_cpp(SEXP target_paramsSEXP, SEXP sampler_paramsSEXP, SEXP x0SEXP, SEXP y0SEXP, SEXP iterSEXP, SEXP thinSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const Rcpp::List& >::type target_params(target_paramsSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type sampler_params(sampler_paramsSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::VectorXd>& >::type x0(x0SEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::VectorXd>& >::type y0(y0SEXP);
    Rcpp::traits::input_parameter< const int& >::type iter(iterSEXP);
    Rcpp::traits::input_parameter< const int& >::type thin(thinSEXP);
    rcpp_result_gen = Rcpp::wrap(sgld_mala_CRN_cpp(target_params, sampler_params, x0, y0, iter, thin));
    return rcpp_result_gen;
END_RCPP
}
// sgldcv_mala_CRN_cpp
Rcpp::List sgldcv_mala_CRN_cpp(const Rcpp::List& target_params, const Rcpp::List& sampler_params, const Eigen::Map<Eigen::VectorXd>& x0, const Eigen::Map<Eigen::VectorXd>& y0, const int& iter, const int& thin);
RcppExport SEXP _wassersteinbound_sgldcv_mala_CRN_cpp(SEXP target_paramsSEXP, SEXP sampler_paramsSEXP, SEXP x0SEXP, SEXP y0SEXP, SEXP iterSEXP, SEXP thinSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const Rcpp::List& >::type target_params(target_paramsSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type sampler_params(sampler_paramsSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::VectorXd>& >::type x0(x0SEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::VectorXd>& >::type y0(y0SEXP);
    Rcpp::traits::input_parameter< const int& >::type iter(iterSEXP);
    Rcpp::traits::input_parameter< const int& >::type thin(thinSEXP);
    rcpp_result_gen = Rcpp::wrap(sgldcv_mala_CRN_cpp(target_params, sampler_params, x0, y0, iter, thin));
    return rcpp_result_gen;
END_RCPP
}
// potential_cpp
double potential_cpp(const Rcpp::List& target_params, const Eigen::Map<Eigen::VectorXd>& theta);
RcppExport SEXP _wassersteinbound_potential_cpp(SEXP target_paramsSEXP, SEXP thetaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const Rcpp::List& >::type target_params(target_paramsSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::VectorXd>& >::type theta(thetaSEXP);
    rcpp_result_gen = Rcpp::wrap(potential_cpp(target_params, theta));
    return rcpp_result_gen;
END_RCPP
}
// gradpotential_cpp
Eigen::VectorXd gradpotential_cpp(const Rcpp::List& target_params, const Eigen::Map<Eigen::VectorXd>& theta);
RcppExport SEXP _wassersteinbound_gradpotential_cpp(SEXP target_paramsSEXP, SEXP thetaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const Rcpp::List& >::type target_params(target_paramsSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::VectorXd>& >::type theta(thetaSEXP);
    rcpp_result_gen = Rcpp::wrap(gradpotential_cpp(target_params, theta));
    return rcpp_result_gen;
END_RCPP
}
// hesspotential_cpp
Eigen::MatrixXd hesspotential_cpp(const Rcpp::List& target_params, const Eigen::Map<Eigen::VectorXd>& theta);
RcppExport SEXP _wassersteinbound_hesspotential_cpp(SEXP target_paramsSEXP, SEXP thetaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const Rcpp::List& >::type target_params(target_paramsSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::VectorXd>& >::type theta(thetaSEXP);
    rcpp_result_gen = Rcpp::wrap(hesspotential_cpp(target_params, theta));
    return rcpp_result_gen;
END_RCPP
}
// w2sq_1d_dual_cpp
Rcpp::List w2sq_1d_dual_cpp(Eigen::ArrayXd x_sorted, Eigen::ArrayXd y_sorted);
RcppExport SEXP _wassersteinbound_w2sq_1d_dual_cpp(SEXP x_sortedSEXP, SEXP y_sortedSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< Eigen::ArrayXd >::type x_sorted(x_sortedSEXP);
    Rcpp::traits::input_parameter< Eigen::ArrayXd >::type y_sorted(y_sortedSEXP);
    rcpp_result_gen = Rcpp::wrap(w2sq_1d_dual_cpp(x_sorted, y_sorted));
    return rcpp_result_gen;
END_RCPP
}
// matrix_power_cpp
Eigen::MatrixXd matrix_power_cpp(const Eigen::Map<Eigen::MatrixXd> A, const int& n);
RcppExport SEXP _wassersteinbound_matrix_power_cpp(SEXP ASEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::MatrixXd> >::type A(ASEXP);
    Rcpp::traits::input_parameter< const int& >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(matrix_power_cpp(A, n));
    return rcpp_result_gen;
END_RCPP
}
// w2sq_gaussian_cpp
double w2sq_gaussian_cpp(const Eigen::Map<Eigen::VectorXd>& a, const Eigen::Map<Eigen::MatrixXd>& A, const Eigen::Map<Eigen::VectorXd>& b, const Eigen::Map<Eigen::MatrixXd>& B);
RcppExport SEXP _wassersteinbound_w2sq_gaussian_cpp(SEXP aSEXP, SEXP ASEXP, SEXP bSEXP, SEXP BSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::VectorXd>& >::type a(aSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::MatrixXd>& >::type A(ASEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::VectorXd>& >::type b(bSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::MatrixXd>& >::type B(BSEXP);
    rcpp_result_gen = Rcpp::wrap(w2sq_gaussian_cpp(a, A, b, B));
    return rcpp_result_gen;
END_RCPP
}
// w2sq_convergence_gaussian_recursive_cpp
Rcpp::List w2sq_convergence_gaussian_recursive_cpp(const Eigen::Map<Eigen::VectorXd>& mu_0, const Eigen::Map<Eigen::MatrixXd>& Sigma_0, const Eigen::Map<Eigen::VectorXd>& mu_inf, const Eigen::Map<Eigen::MatrixXd>& Sigma_inf, const Eigen::Map<Eigen::MatrixXd>& B, const int& d, const int& iter, const int& thin, const double& tol);
RcppExport SEXP _wassersteinbound_w2sq_convergence_gaussian_recursive_cpp(SEXP mu_0SEXP, SEXP Sigma_0SEXP, SEXP mu_infSEXP, SEXP Sigma_infSEXP, SEXP BSEXP, SEXP dSEXP, SEXP iterSEXP, SEXP thinSEXP, SEXP tolSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::VectorXd>& >::type mu_0(mu_0SEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::MatrixXd>& >::type Sigma_0(Sigma_0SEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::VectorXd>& >::type mu_inf(mu_infSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::MatrixXd>& >::type Sigma_inf(Sigma_infSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::MatrixXd>& >::type B(BSEXP);
    Rcpp::traits::input_parameter< const int& >::type d(dSEXP);
    Rcpp::traits::input_parameter< const int& >::type iter(iterSEXP);
    Rcpp::traits::input_parameter< const int& >::type thin(thinSEXP);
    Rcpp::traits::input_parameter< const double& >::type tol(tolSEXP);
    rcpp_result_gen = Rcpp::wrap(w2sq_convergence_gaussian_recursive_cpp(mu_0, Sigma_0, mu_inf, Sigma_inf, B, d, iter, thin, tol));
    return rcpp_result_gen;
END_RCPP
}
// colwise_rank_cpp
Eigen::ArrayXXi colwise_rank_cpp(const Eigen::Map<Eigen::ArrayXXd>& mat);
RcppExport SEXP _wassersteinbound_colwise_rank_cpp(SEXP matSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::ArrayXXd>& >::type mat(matSEXP);
    rcpp_result_gen = Rcpp::wrap(colwise_rank_cpp(mat));
    return rcpp_result_gen;
END_RCPP
}
// permute_matrix_colwise_inplace_cpp
void permute_matrix_colwise_inplace_cpp(Eigen::Map<Eigen::MatrixXd>& mat, const Eigen::Map<Eigen::MatrixXi>& idx_colwise);
RcppExport SEXP _wassersteinbound_permute_matrix_colwise_inplace_cpp(SEXP matSEXP, SEXP idx_colwiseSEXP) {
BEGIN_RCPP
    Rcpp::traits::input_parameter< Eigen::Map<Eigen::MatrixXd>& >::type mat(matSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::MatrixXi>& >::type idx_colwise(idx_colwiseSEXP);
    permute_matrix_colwise_inplace_cpp(mat, idx_colwise);
    return R_NilValue;
END_RCPP
}
// colwise_squared_norm_with_skip_cpp
Eigen::VectorXd colwise_squared_norm_with_skip_cpp(const Eigen::Map<Eigen::MatrixXd>& x, const Eigen::Map<Eigen::MatrixXd>& y, Eigen::Map<Eigen::MatrixXi>& rm_idx_x, Eigen::Map<Eigen::MatrixXi>& rm_idx_y);
RcppExport SEXP _wassersteinbound_colwise_squared_norm_with_skip_cpp(SEXP xSEXP, SEXP ySEXP, SEXP rm_idx_xSEXP, SEXP rm_idx_ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::MatrixXd>& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::MatrixXd>& >::type y(ySEXP);
    Rcpp::traits::input_parameter< Eigen::Map<Eigen::MatrixXi>& >::type rm_idx_x(rm_idx_xSEXP);
    Rcpp::traits::input_parameter< Eigen::Map<Eigen::MatrixXi>& >::type rm_idx_y(rm_idx_ySEXP);
    rcpp_result_gen = Rcpp::wrap(colwise_squared_norm_with_skip_cpp(x, y, rm_idx_x, rm_idx_y));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_wassersteinbound_assignment_squared_euclidean_toms1015_cpp", (DL_FUNC) &_wassersteinbound_assignment_squared_euclidean_toms1015_cpp, 3},
    {"_wassersteinbound_assignment_squared_euclidean_networkflow_cpp", (DL_FUNC) &_wassersteinbound_assignment_squared_euclidean_networkflow_cpp, 3},
    {"_wassersteinbound_assignment_squared_euclidean_jackknife_cpp", (DL_FUNC) &_wassersteinbound_assignment_squared_euclidean_jackknife_cpp, 3},
    {"_wassersteinbound_assignment_squared_euclidean_jackknife_1d_cpp", (DL_FUNC) &_wassersteinbound_assignment_squared_euclidean_jackknife_1d_cpp, 4},
    {"_wassersteinbound_EvaluateSquaredCost", (DL_FUNC) &_wassersteinbound_EvaluateSquaredCost, 2},
    {"_wassersteinbound_gibbs_periodicAR1_cpp", (DL_FUNC) &_wassersteinbound_gibbs_periodicAR1_cpp, 5},
    {"_wassersteinbound_gibbs_periodicAR1_CRN_cpp", (DL_FUNC) &_wassersteinbound_gibbs_periodicAR1_CRN_cpp, 6},
    {"_wassersteinbound_gibbs_periodicAR1_ReflMax_cpp", (DL_FUNC) &_wassersteinbound_gibbs_periodicAR1_ReflMax_cpp, 6},
    {"_wassersteinbound_low_inc_gamma_cpp", (DL_FUNC) &_wassersteinbound_low_inc_gamma_cpp, 2},
    {"_wassersteinbound_low_inc_gamma_inv_cpp", (DL_FUNC) &_wassersteinbound_low_inc_gamma_inv_cpp, 2},
    {"_wassersteinbound_cpp_prod", (DL_FUNC) &_wassersteinbound_cpp_prod, 2},
    {"_wassersteinbound_cpp_crossprod", (DL_FUNC) &_wassersteinbound_cpp_crossprod, 1},
    {"_wassersteinbound_cpp_cov", (DL_FUNC) &_wassersteinbound_cpp_cov, 1},
    {"_wassersteinbound_SetSeed_pcg32", (DL_FUNC) &_wassersteinbound_SetSeed_pcg32, 2},
    {"_wassersteinbound_rwm_cpp", (DL_FUNC) &_wassersteinbound_rwm_cpp, 5},
    {"_wassersteinbound_mala_cpp", (DL_FUNC) &_wassersteinbound_mala_cpp, 5},
    {"_wassersteinbound_ula_cpp", (DL_FUNC) &_wassersteinbound_ula_cpp, 5},
    {"_wassersteinbound_obab_cpp", (DL_FUNC) &_wassersteinbound_obab_cpp, 5},
    {"_wassersteinbound_horowitz_cpp", (DL_FUNC) &_wassersteinbound_horowitz_cpp, 5},
    {"_wassersteinbound_fisher_mala_cpp", (DL_FUNC) &_wassersteinbound_fisher_mala_cpp, 5},
    {"_wassersteinbound_rwm_twoscalegcrn_cpp", (DL_FUNC) &_wassersteinbound_rwm_twoscalegcrn_cpp, 6},
    {"_wassersteinbound_ula_twoscalecrn_cpp", (DL_FUNC) &_wassersteinbound_ula_twoscalecrn_cpp, 6},
    {"_wassersteinbound_mala_twoscalecrn_cpp", (DL_FUNC) &_wassersteinbound_mala_twoscalecrn_cpp, 6},
    {"_wassersteinbound_horowitz_CRN_cpp", (DL_FUNC) &_wassersteinbound_horowitz_CRN_cpp, 6},
    {"_wassersteinbound_obab_CRN_cpp", (DL_FUNC) &_wassersteinbound_obab_CRN_cpp, 6},
    {"_wassersteinbound_ula_mala_CRN_cpp", (DL_FUNC) &_wassersteinbound_ula_mala_CRN_cpp, 6},
    {"_wassersteinbound_obab_horowitz_CRN_cpp", (DL_FUNC) &_wassersteinbound_obab_horowitz_CRN_cpp, 6},
    {"_wassersteinbound_mala_CRN_2targets_cpp", (DL_FUNC) &_wassersteinbound_mala_CRN_2targets_cpp, 7},
    {"_wassersteinbound_sgld_cpp", (DL_FUNC) &_wassersteinbound_sgld_cpp, 5},
    {"_wassersteinbound_sgldcv_cpp", (DL_FUNC) &_wassersteinbound_sgldcv_cpp, 5},
    {"_wassersteinbound_sgld_mala_CRN_cpp", (DL_FUNC) &_wassersteinbound_sgld_mala_CRN_cpp, 6},
    {"_wassersteinbound_sgldcv_mala_CRN_cpp", (DL_FUNC) &_wassersteinbound_sgldcv_mala_CRN_cpp, 6},
    {"_wassersteinbound_potential_cpp", (DL_FUNC) &_wassersteinbound_potential_cpp, 2},
    {"_wassersteinbound_gradpotential_cpp", (DL_FUNC) &_wassersteinbound_gradpotential_cpp, 2},
    {"_wassersteinbound_hesspotential_cpp", (DL_FUNC) &_wassersteinbound_hesspotential_cpp, 2},
    {"_wassersteinbound_w2sq_1d_dual_cpp", (DL_FUNC) &_wassersteinbound_w2sq_1d_dual_cpp, 2},
    {"_wassersteinbound_matrix_power_cpp", (DL_FUNC) &_wassersteinbound_matrix_power_cpp, 2},
    {"_wassersteinbound_w2sq_gaussian_cpp", (DL_FUNC) &_wassersteinbound_w2sq_gaussian_cpp, 4},
    {"_wassersteinbound_w2sq_convergence_gaussian_recursive_cpp", (DL_FUNC) &_wassersteinbound_w2sq_convergence_gaussian_recursive_cpp, 9},
    {"_wassersteinbound_colwise_rank_cpp", (DL_FUNC) &_wassersteinbound_colwise_rank_cpp, 1},
    {"_wassersteinbound_permute_matrix_colwise_inplace_cpp", (DL_FUNC) &_wassersteinbound_permute_matrix_colwise_inplace_cpp, 2},
    {"_wassersteinbound_colwise_squared_norm_with_skip_cpp", (DL_FUNC) &_wassersteinbound_colwise_squared_norm_with_skip_cpp, 4},
    {NULL, NULL, 0}
};

RcppExport void R_init_wassersteinbound(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}

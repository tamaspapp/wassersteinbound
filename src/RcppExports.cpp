// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppEigen.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// Flapjack
Rcpp::List Flapjack(const Rcpp::NumericMatrix& C);
RcppExport SEXP _wassersteinbound_Flapjack(SEXP CSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericMatrix& >::type C(CSEXP);
    rcpp_result_gen = Rcpp::wrap(Flapjack(C));
    return rcpp_result_gen;
END_RCPP
}
// SimulateGibbs_ar1
Rcpp::List SimulateGibbs_ar1(const Eigen::Map<Eigen::ArrayXd>& x0, const double& sd, const double& c, const int& iter_store_x, const int& iter_final_x, const int& thin);
RcppExport SEXP _wassersteinbound_SimulateGibbs_ar1(SEXP x0SEXP, SEXP sdSEXP, SEXP cSEXP, SEXP iter_store_xSEXP, SEXP iter_final_xSEXP, SEXP thinSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::ArrayXd>& >::type x0(x0SEXP);
    Rcpp::traits::input_parameter< const double& >::type sd(sdSEXP);
    Rcpp::traits::input_parameter< const double& >::type c(cSEXP);
    Rcpp::traits::input_parameter< const int& >::type iter_store_x(iter_store_xSEXP);
    Rcpp::traits::input_parameter< const int& >::type iter_final_x(iter_final_xSEXP);
    Rcpp::traits::input_parameter< const int& >::type thin(thinSEXP);
    rcpp_result_gen = Rcpp::wrap(SimulateGibbs_ar1(x0, sd, c, iter_store_x, iter_final_x, thin));
    return rcpp_result_gen;
END_RCPP
}
// SimulateReflMaxGibbs_ar1
Rcpp::List SimulateReflMaxGibbs_ar1(const Eigen::Map<Eigen::ArrayXd>& x0, const Eigen::Map<Eigen::ArrayXd>& y0, const double& sd, const double& c, const int& L, const int& iter_store_x, const int& iter_final_x, const int& thin);
RcppExport SEXP _wassersteinbound_SimulateReflMaxGibbs_ar1(SEXP x0SEXP, SEXP y0SEXP, SEXP sdSEXP, SEXP cSEXP, SEXP LSEXP, SEXP iter_store_xSEXP, SEXP iter_final_xSEXP, SEXP thinSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::ArrayXd>& >::type x0(x0SEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::ArrayXd>& >::type y0(y0SEXP);
    Rcpp::traits::input_parameter< const double& >::type sd(sdSEXP);
    Rcpp::traits::input_parameter< const double& >::type c(cSEXP);
    Rcpp::traits::input_parameter< const int& >::type L(LSEXP);
    Rcpp::traits::input_parameter< const int& >::type iter_store_x(iter_store_xSEXP);
    Rcpp::traits::input_parameter< const int& >::type iter_final_x(iter_final_xSEXP);
    Rcpp::traits::input_parameter< const int& >::type thin(thinSEXP);
    rcpp_result_gen = Rcpp::wrap(SimulateReflMaxGibbs_ar1(x0, y0, sd, c, L, iter_store_x, iter_final_x, thin));
    return rcpp_result_gen;
END_RCPP
}
// EvaluateJackknife1d
Rcpp::List EvaluateJackknife1d(Rcpp::NumericVector x_sorted, Rcpp::NumericVector y_sorted, Rcpp::IntegerVector inv_order_x, Rcpp::IntegerVector inv_order_y);
RcppExport SEXP _wassersteinbound_EvaluateJackknife1d(SEXP x_sortedSEXP, SEXP y_sortedSEXP, SEXP inv_order_xSEXP, SEXP inv_order_ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type x_sorted(x_sortedSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type y_sorted(y_sortedSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type inv_order_x(inv_order_xSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type inv_order_y(inv_order_ySEXP);
    rcpp_result_gen = Rcpp::wrap(EvaluateJackknife1d(x_sorted, y_sorted, inv_order_x, inv_order_y));
    return rcpp_result_gen;
END_RCPP
}
// RWMLogistic
Rcpp::List RWMLogistic(const Eigen::Map<Eigen::VectorXd>& x0, const double& h, const int& iter);
RcppExport SEXP _wassersteinbound_RWMLogistic(SEXP x0SEXP, SEXP hSEXP, SEXP iterSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::VectorXd>& >::type x0(x0SEXP);
    Rcpp::traits::input_parameter< const double& >::type h(hSEXP);
    Rcpp::traits::input_parameter< const int& >::type iter(iterSEXP);
    rcpp_result_gen = Rcpp::wrap(RWMLogistic(x0, h, iter));
    return rcpp_result_gen;
END_RCPP
}
// MALALogistic
Rcpp::List MALALogistic(const Eigen::Map<Eigen::VectorXd>& x0, const double& h, const int& iter);
RcppExport SEXP _wassersteinbound_MALALogistic(SEXP x0SEXP, SEXP hSEXP, SEXP iterSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::VectorXd>& >::type x0(x0SEXP);
    Rcpp::traits::input_parameter< const double& >::type h(hSEXP);
    Rcpp::traits::input_parameter< const int& >::type iter(iterSEXP);
    rcpp_result_gen = Rcpp::wrap(MALALogistic(x0, h, iter));
    return rcpp_result_gen;
END_RCPP
}
// SimulateULA_scaling
Rcpp::List SimulateULA_scaling(const Eigen::Map<Eigen::SparseMatrix<double>>& Sigma_inv, const Eigen::Map<Eigen::SparseMatrix<double>>& U, const double& disp, const double& h, const int& iter, const int& thin);
RcppExport SEXP _wassersteinbound_SimulateULA_scaling(SEXP Sigma_invSEXP, SEXP USEXP, SEXP dispSEXP, SEXP hSEXP, SEXP iterSEXP, SEXP thinSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::SparseMatrix<double>>& >::type Sigma_inv(Sigma_invSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::SparseMatrix<double>>& >::type U(USEXP);
    Rcpp::traits::input_parameter< const double& >::type disp(dispSEXP);
    Rcpp::traits::input_parameter< const double& >::type h(hSEXP);
    Rcpp::traits::input_parameter< const int& >::type iter(iterSEXP);
    Rcpp::traits::input_parameter< const int& >::type thin(thinSEXP);
    rcpp_result_gen = Rcpp::wrap(SimulateULA_scaling(Sigma_inv, U, disp, h, iter, thin));
    return rcpp_result_gen;
END_RCPP
}
// SimulateMALA_scaling
Rcpp::List SimulateMALA_scaling(const Eigen::Map<Eigen::SparseMatrix<double>>& Sigma_inv, const Eigen::Map<Eigen::SparseMatrix<double>>& U, const double& disp, const double& h, const int& iter, const int& thin);
RcppExport SEXP _wassersteinbound_SimulateMALA_scaling(SEXP Sigma_invSEXP, SEXP USEXP, SEXP dispSEXP, SEXP hSEXP, SEXP iterSEXP, SEXP thinSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::SparseMatrix<double>>& >::type Sigma_inv(Sigma_invSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::SparseMatrix<double>>& >::type U(USEXP);
    Rcpp::traits::input_parameter< const double& >::type disp(dispSEXP);
    Rcpp::traits::input_parameter< const double& >::type h(hSEXP);
    Rcpp::traits::input_parameter< const int& >::type iter(iterSEXP);
    Rcpp::traits::input_parameter< const int& >::type thin(thinSEXP);
    rcpp_result_gen = Rcpp::wrap(SimulateMALA_scaling(Sigma_inv, U, disp, h, iter, thin));
    return rcpp_result_gen;
END_RCPP
}
// SimulateReflMaxULA_scaling
Rcpp::List SimulateReflMaxULA_scaling(const Eigen::Map<Eigen::SparseMatrix<double>>& Sigma_inv, const Eigen::Map<Eigen::SparseMatrix<double>>& U, const double& disp, const double& h, const int& L, const int& iter, const int& iter_reference, const int& thin);
RcppExport SEXP _wassersteinbound_SimulateReflMaxULA_scaling(SEXP Sigma_invSEXP, SEXP USEXP, SEXP dispSEXP, SEXP hSEXP, SEXP LSEXP, SEXP iterSEXP, SEXP iter_referenceSEXP, SEXP thinSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::SparseMatrix<double>>& >::type Sigma_inv(Sigma_invSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::SparseMatrix<double>>& >::type U(USEXP);
    Rcpp::traits::input_parameter< const double& >::type disp(dispSEXP);
    Rcpp::traits::input_parameter< const double& >::type h(hSEXP);
    Rcpp::traits::input_parameter< const int& >::type L(LSEXP);
    Rcpp::traits::input_parameter< const int& >::type iter(iterSEXP);
    Rcpp::traits::input_parameter< const int& >::type iter_reference(iter_referenceSEXP);
    Rcpp::traits::input_parameter< const int& >::type thin(thinSEXP);
    rcpp_result_gen = Rcpp::wrap(SimulateReflMaxULA_scaling(Sigma_inv, U, disp, h, L, iter, iter_reference, thin));
    return rcpp_result_gen;
END_RCPP
}
// SimulateReflMaxMALA_scaling
Rcpp::List SimulateReflMaxMALA_scaling(const Eigen::Map<Eigen::SparseMatrix<double>>& Sigma_inv, const Eigen::Map<Eigen::SparseMatrix<double>>& U, const double& disp, const double& h, const int& L, const int& iter, const int& iter_reference, const int& thin);
RcppExport SEXP _wassersteinbound_SimulateReflMaxMALA_scaling(SEXP Sigma_invSEXP, SEXP USEXP, SEXP dispSEXP, SEXP hSEXP, SEXP LSEXP, SEXP iterSEXP, SEXP iter_referenceSEXP, SEXP thinSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::SparseMatrix<double>>& >::type Sigma_inv(Sigma_invSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::SparseMatrix<double>>& >::type U(USEXP);
    Rcpp::traits::input_parameter< const double& >::type disp(dispSEXP);
    Rcpp::traits::input_parameter< const double& >::type h(hSEXP);
    Rcpp::traits::input_parameter< const int& >::type L(LSEXP);
    Rcpp::traits::input_parameter< const int& >::type iter(iterSEXP);
    Rcpp::traits::input_parameter< const int& >::type iter_reference(iter_referenceSEXP);
    Rcpp::traits::input_parameter< const int& >::type thin(thinSEXP);
    rcpp_result_gen = Rcpp::wrap(SimulateReflMaxMALA_scaling(Sigma_inv, U, disp, h, L, iter, iter_reference, thin));
    return rcpp_result_gen;
END_RCPP
}
// RWMMixture1d
Rcpp::List RWMMixture1d(const double& x0, const Eigen::Map<Eigen::ArrayXd>& p, const Eigen::Map<Eigen::ArrayXd>& mu, const Eigen::Map<Eigen::ArrayXd>& sigma, const double& h, const int& iter);
RcppExport SEXP _wassersteinbound_RWMMixture1d(SEXP x0SEXP, SEXP pSEXP, SEXP muSEXP, SEXP sigmaSEXP, SEXP hSEXP, SEXP iterSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const double& >::type x0(x0SEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::ArrayXd>& >::type p(pSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::ArrayXd>& >::type mu(muSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::ArrayXd>& >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< const double& >::type h(hSEXP);
    Rcpp::traits::input_parameter< const int& >::type iter(iterSEXP);
    rcpp_result_gen = Rcpp::wrap(RWMMixture1d(x0, p, mu, sigma, h, iter));
    return rcpp_result_gen;
END_RCPP
}
// MALAMixture1d
Rcpp::List MALAMixture1d(const double& x0, const Eigen::Map<Eigen::ArrayXd>& p, const Eigen::Map<Eigen::ArrayXd>& mu, const Eigen::Map<Eigen::ArrayXd>& sigma, const double& h, const int& iter);
RcppExport SEXP _wassersteinbound_MALAMixture1d(SEXP x0SEXP, SEXP pSEXP, SEXP muSEXP, SEXP sigmaSEXP, SEXP hSEXP, SEXP iterSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const double& >::type x0(x0SEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::ArrayXd>& >::type p(pSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::ArrayXd>& >::type mu(muSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::ArrayXd>& >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< const double& >::type h(hSEXP);
    Rcpp::traits::input_parameter< const int& >::type iter(iterSEXP);
    rcpp_result_gen = Rcpp::wrap(MALAMixture1d(x0, p, mu, sigma, h, iter));
    return rcpp_result_gen;
END_RCPP
}
// SolveAssignmentNetworkflow
double SolveAssignmentNetworkflow(const Rcpp::NumericMatrix& C);
RcppExport SEXP _wassersteinbound_SolveAssignmentNetworkflow(SEXP CSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericMatrix& >::type C(CSEXP);
    rcpp_result_gen = Rcpp::wrap(SolveAssignmentNetworkflow(C));
    return rcpp_result_gen;
END_RCPP
}
// SetSeed_cpp
void SetSeed_cpp(const int& seed, const int& stream);
RcppExport SEXP _wassersteinbound_SetSeed_cpp(SEXP seedSEXP, SEXP streamSEXP) {
BEGIN_RCPP
    Rcpp::traits::input_parameter< const int& >::type seed(seedSEXP);
    Rcpp::traits::input_parameter< const int& >::type stream(streamSEXP);
    SetSeed_cpp(seed, stream);
    return R_NilValue;
END_RCPP
}
// EvaluateSquaredCost
Eigen::ArrayXXd EvaluateSquaredCost(const Eigen::Map<Eigen::MatrixXd>& x, const Eigen::Map<Eigen::MatrixXd>& y, const int& nthreads);
RcppExport SEXP _wassersteinbound_EvaluateSquaredCost(SEXP xSEXP, SEXP ySEXP, SEXP nthreadsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::MatrixXd>& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::MatrixXd>& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const int& >::type nthreads(nthreadsSEXP);
    rcpp_result_gen = Rcpp::wrap(EvaluateSquaredCost(x, y, nthreads));
    return rcpp_result_gen;
END_RCPP
}
// RWMStdGaussian
Rcpp::List RWMStdGaussian(const Eigen::Map<Eigen::VectorXd>& x0, const double& h, const int& iter);
RcppExport SEXP _wassersteinbound_RWMStdGaussian(SEXP x0SEXP, SEXP hSEXP, SEXP iterSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::VectorXd>& >::type x0(x0SEXP);
    Rcpp::traits::input_parameter< const double& >::type h(hSEXP);
    Rcpp::traits::input_parameter< const int& >::type iter(iterSEXP);
    rcpp_result_gen = Rcpp::wrap(RWMStdGaussian(x0, h, iter));
    return rcpp_result_gen;
END_RCPP
}
// MALAStdGaussian
Rcpp::List MALAStdGaussian(const Eigen::Map<Eigen::VectorXd>& x0, const double& h, const int& iter);
RcppExport SEXP _wassersteinbound_MALAStdGaussian(SEXP x0SEXP, SEXP hSEXP, SEXP iterSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::VectorXd>& >::type x0(x0SEXP);
    Rcpp::traits::input_parameter< const double& >::type h(hSEXP);
    Rcpp::traits::input_parameter< const int& >::type iter(iterSEXP);
    rcpp_result_gen = Rcpp::wrap(MALAStdGaussian(x0, h, iter));
    return rcpp_result_gen;
END_RCPP
}
// SampleLatentVariables
Rcpp::NumericVector SampleLatentVariables(int T, double sig, double phi);
RcppExport SEXP _wassersteinbound_SampleLatentVariables(SEXP TSEXP, SEXP sigSEXP, SEXP phiSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< int >::type T(TSEXP);
    Rcpp::traits::input_parameter< double >::type sig(sigSEXP);
    Rcpp::traits::input_parameter< double >::type phi(phiSEXP);
    rcpp_result_gen = Rcpp::wrap(SampleLatentVariables(T, sig, phi));
    return rcpp_result_gen;
END_RCPP
}
// SimulateRWM_SVM
Rcpp::List SimulateRWM_SVM(const Eigen::Map<Eigen::ArrayXd> x0, const Eigen::Map<Eigen::ArrayXd> y, const double& beta, const double& sigma, const double& phi, const double& h, const int& iter_store_x, const int& iter_final_x, const int& thin);
RcppExport SEXP _wassersteinbound_SimulateRWM_SVM(SEXP x0SEXP, SEXP ySEXP, SEXP betaSEXP, SEXP sigmaSEXP, SEXP phiSEXP, SEXP hSEXP, SEXP iter_store_xSEXP, SEXP iter_final_xSEXP, SEXP thinSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::ArrayXd> >::type x0(x0SEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::ArrayXd> >::type y(ySEXP);
    Rcpp::traits::input_parameter< const double& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const double& >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< const double& >::type phi(phiSEXP);
    Rcpp::traits::input_parameter< const double& >::type h(hSEXP);
    Rcpp::traits::input_parameter< const int& >::type iter_store_x(iter_store_xSEXP);
    Rcpp::traits::input_parameter< const int& >::type iter_final_x(iter_final_xSEXP);
    Rcpp::traits::input_parameter< const int& >::type thin(thinSEXP);
    rcpp_result_gen = Rcpp::wrap(SimulateRWM_SVM(x0, y, beta, sigma, phi, h, iter_store_x, iter_final_x, thin));
    return rcpp_result_gen;
END_RCPP
}
// SimulateReflMaxRWM_SVM
Rcpp::List SimulateReflMaxRWM_SVM(const Eigen::Map<Eigen::ArrayXd> x0, const Eigen::Map<Eigen::ArrayXd> y0, const Eigen::Map<Eigen::ArrayXd> y_data, const double& beta, const double& sigma, const double& phi, const double& h, const int& L, const int& iter_store_x, const int& iter_final_x, const int& thin);
RcppExport SEXP _wassersteinbound_SimulateReflMaxRWM_SVM(SEXP x0SEXP, SEXP y0SEXP, SEXP y_dataSEXP, SEXP betaSEXP, SEXP sigmaSEXP, SEXP phiSEXP, SEXP hSEXP, SEXP LSEXP, SEXP iter_store_xSEXP, SEXP iter_final_xSEXP, SEXP thinSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::ArrayXd> >::type x0(x0SEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::ArrayXd> >::type y0(y0SEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::ArrayXd> >::type y_data(y_dataSEXP);
    Rcpp::traits::input_parameter< const double& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const double& >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< const double& >::type phi(phiSEXP);
    Rcpp::traits::input_parameter< const double& >::type h(hSEXP);
    Rcpp::traits::input_parameter< const int& >::type L(LSEXP);
    Rcpp::traits::input_parameter< const int& >::type iter_store_x(iter_store_xSEXP);
    Rcpp::traits::input_parameter< const int& >::type iter_final_x(iter_final_xSEXP);
    Rcpp::traits::input_parameter< const int& >::type thin(thinSEXP);
    rcpp_result_gen = Rcpp::wrap(SimulateReflMaxRWM_SVM(x0, y0, y_data, beta, sigma, phi, h, L, iter_store_x, iter_final_x, thin));
    return rcpp_result_gen;
END_RCPP
}
// SimulateMALA_SVM
Rcpp::List SimulateMALA_SVM(const Eigen::Map<Eigen::ArrayXd> x0, const Eigen::Map<Eigen::ArrayXd> y, const double& beta, const double& sigma, const double& phi, const double& h, const int& iter_store_x, const int& iter_final_x, const int& thin);
RcppExport SEXP _wassersteinbound_SimulateMALA_SVM(SEXP x0SEXP, SEXP ySEXP, SEXP betaSEXP, SEXP sigmaSEXP, SEXP phiSEXP, SEXP hSEXP, SEXP iter_store_xSEXP, SEXP iter_final_xSEXP, SEXP thinSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::ArrayXd> >::type x0(x0SEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::ArrayXd> >::type y(ySEXP);
    Rcpp::traits::input_parameter< const double& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const double& >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< const double& >::type phi(phiSEXP);
    Rcpp::traits::input_parameter< const double& >::type h(hSEXP);
    Rcpp::traits::input_parameter< const int& >::type iter_store_x(iter_store_xSEXP);
    Rcpp::traits::input_parameter< const int& >::type iter_final_x(iter_final_xSEXP);
    Rcpp::traits::input_parameter< const int& >::type thin(thinSEXP);
    rcpp_result_gen = Rcpp::wrap(SimulateMALA_SVM(x0, y, beta, sigma, phi, h, iter_store_x, iter_final_x, thin));
    return rcpp_result_gen;
END_RCPP
}
// SimulateReflMaxMALA_SVM
Rcpp::List SimulateReflMaxMALA_SVM(const Eigen::Map<Eigen::ArrayXd> x0, const Eigen::Map<Eigen::ArrayXd> y0, const Eigen::Map<Eigen::ArrayXd> y_data, const double& beta, const double& sigma, const double& phi, const double& h, const int& L, const int& iter_store_x, const int& iter_final_x, const int& thin);
RcppExport SEXP _wassersteinbound_SimulateReflMaxMALA_SVM(SEXP x0SEXP, SEXP y0SEXP, SEXP y_dataSEXP, SEXP betaSEXP, SEXP sigmaSEXP, SEXP phiSEXP, SEXP hSEXP, SEXP LSEXP, SEXP iter_store_xSEXP, SEXP iter_final_xSEXP, SEXP thinSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::ArrayXd> >::type x0(x0SEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::ArrayXd> >::type y0(y0SEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::ArrayXd> >::type y_data(y_dataSEXP);
    Rcpp::traits::input_parameter< const double& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const double& >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< const double& >::type phi(phiSEXP);
    Rcpp::traits::input_parameter< const double& >::type h(hSEXP);
    Rcpp::traits::input_parameter< const int& >::type L(LSEXP);
    Rcpp::traits::input_parameter< const int& >::type iter_store_x(iter_store_xSEXP);
    Rcpp::traits::input_parameter< const int& >::type iter_final_x(iter_final_xSEXP);
    Rcpp::traits::input_parameter< const int& >::type thin(thinSEXP);
    rcpp_result_gen = Rcpp::wrap(SimulateReflMaxMALA_SVM(x0, y0, y_data, beta, sigma, phi, h, L, iter_store_x, iter_final_x, thin));
    return rcpp_result_gen;
END_RCPP
}
// SimulateReflMaxRWMMeetingTime_SVM
int SimulateReflMaxRWMMeetingTime_SVM(const Eigen::Map<Eigen::ArrayXd> x0, const Eigen::Map<Eigen::ArrayXd> y0, const Eigen::Map<Eigen::ArrayXd> y_data, const double& beta, const double& sigma, const double& phi, const double& h, const int& L, const int& maxiter);
RcppExport SEXP _wassersteinbound_SimulateReflMaxRWMMeetingTime_SVM(SEXP x0SEXP, SEXP y0SEXP, SEXP y_dataSEXP, SEXP betaSEXP, SEXP sigmaSEXP, SEXP phiSEXP, SEXP hSEXP, SEXP LSEXP, SEXP maxiterSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::ArrayXd> >::type x0(x0SEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::ArrayXd> >::type y0(y0SEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::ArrayXd> >::type y_data(y_dataSEXP);
    Rcpp::traits::input_parameter< const double& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const double& >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< const double& >::type phi(phiSEXP);
    Rcpp::traits::input_parameter< const double& >::type h(hSEXP);
    Rcpp::traits::input_parameter< const int& >::type L(LSEXP);
    Rcpp::traits::input_parameter< const int& >::type maxiter(maxiterSEXP);
    rcpp_result_gen = Rcpp::wrap(SimulateReflMaxRWMMeetingTime_SVM(x0, y0, y_data, beta, sigma, phi, h, L, maxiter));
    return rcpp_result_gen;
END_RCPP
}
// SimulateReflMaxMALAMeetingTime_SVM
int SimulateReflMaxMALAMeetingTime_SVM(const Eigen::Map<Eigen::ArrayXd> x0, const Eigen::Map<Eigen::ArrayXd> y0, const Eigen::Map<Eigen::ArrayXd> y_data, const double& beta, const double& sigma, const double& phi, const double& h, const int& L);
RcppExport SEXP _wassersteinbound_SimulateReflMaxMALAMeetingTime_SVM(SEXP x0SEXP, SEXP y0SEXP, SEXP y_dataSEXP, SEXP betaSEXP, SEXP sigmaSEXP, SEXP phiSEXP, SEXP hSEXP, SEXP LSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::ArrayXd> >::type x0(x0SEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::ArrayXd> >::type y0(y0SEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::ArrayXd> >::type y_data(y_dataSEXP);
    Rcpp::traits::input_parameter< const double& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const double& >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< const double& >::type phi(phiSEXP);
    Rcpp::traits::input_parameter< const double& >::type h(hSEXP);
    Rcpp::traits::input_parameter< const int& >::type L(LSEXP);
    rcpp_result_gen = Rcpp::wrap(SimulateReflMaxMALAMeetingTime_SVM(x0, y0, y_data, beta, sigma, phi, h, L));
    return rcpp_result_gen;
END_RCPP
}
// EvaluateW2sq
double EvaluateW2sq(const Eigen::Map<Eigen::VectorXd>& a, const Eigen::Map<Eigen::MatrixXd>& A, const Eigen::Map<Eigen::VectorXd>& b, const Eigen::Map<Eigen::MatrixXd>& B);
RcppExport SEXP _wassersteinbound_EvaluateW2sq(SEXP aSEXP, SEXP ASEXP, SEXP bSEXP, SEXP BSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::VectorXd>& >::type a(aSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::MatrixXd>& >::type A(ASEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::VectorXd>& >::type b(bSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::MatrixXd>& >::type B(BSEXP);
    rcpp_result_gen = Rcpp::wrap(EvaluateW2sq(a, A, b, B));
    return rcpp_result_gen;
END_RCPP
}
// EvaluateW2sqGibbs
Rcpp::List EvaluateW2sqGibbs(const Eigen::Map<Eigen::VectorXd>& mu_0, const Eigen::Map<Eigen::MatrixXd>& Sigma_0, const Eigen::Map<Eigen::VectorXd>& mu, const Eigen::Map<Eigen::MatrixXd>& Sigma, const int& iter, const int& thin);
RcppExport SEXP _wassersteinbound_EvaluateW2sqGibbs(SEXP mu_0SEXP, SEXP Sigma_0SEXP, SEXP muSEXP, SEXP SigmaSEXP, SEXP iterSEXP, SEXP thinSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::VectorXd>& >::type mu_0(mu_0SEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::MatrixXd>& >::type Sigma_0(Sigma_0SEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::VectorXd>& >::type mu(muSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::MatrixXd>& >::type Sigma(SigmaSEXP);
    Rcpp::traits::input_parameter< const int& >::type iter(iterSEXP);
    Rcpp::traits::input_parameter< const int& >::type thin(thinSEXP);
    rcpp_result_gen = Rcpp::wrap(EvaluateW2sqGibbs(mu_0, Sigma_0, mu, Sigma, iter, thin));
    return rcpp_result_gen;
END_RCPP
}
// EvaluateW2sqGibbsFull
Rcpp::List EvaluateW2sqGibbsFull(const Eigen::Map<Eigen::VectorXd>& mu_0, const Eigen::Map<Eigen::MatrixXd>& Sigma_0, const Eigen::Map<Eigen::VectorXd>& mu, const Eigen::Map<Eigen::MatrixXd>& Sigma, const int& iter, const int& thin, const int& nthreads);
RcppExport SEXP _wassersteinbound_EvaluateW2sqGibbsFull(SEXP mu_0SEXP, SEXP Sigma_0SEXP, SEXP muSEXP, SEXP SigmaSEXP, SEXP iterSEXP, SEXP thinSEXP, SEXP nthreadsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::VectorXd>& >::type mu_0(mu_0SEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::MatrixXd>& >::type Sigma_0(Sigma_0SEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::VectorXd>& >::type mu(muSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::MatrixXd>& >::type Sigma(SigmaSEXP);
    Rcpp::traits::input_parameter< const int& >::type iter(iterSEXP);
    Rcpp::traits::input_parameter< const int& >::type thin(thinSEXP);
    Rcpp::traits::input_parameter< const int& >::type nthreads(nthreadsSEXP);
    rcpp_result_gen = Rcpp::wrap(EvaluateW2sqGibbsFull(mu_0, Sigma_0, mu, Sigma, iter, thin, nthreads));
    return rcpp_result_gen;
END_RCPP
}
// EvaluateW2sqULA
Rcpp::List EvaluateW2sqULA(const Eigen::Map<Eigen::VectorXd>& mu_0, const Eigen::Map<Eigen::SparseMatrix<double>>& Sigma_0, const Eigen::Map<Eigen::VectorXd>& mu, const Eigen::Map<Eigen::MatrixXd>& Sigma_ULA, const Eigen::Map<Eigen::SparseMatrix<double>>& M, const Rcpp::IntegerVector& which_iters, const double& h);
RcppExport SEXP _wassersteinbound_EvaluateW2sqULA(SEXP mu_0SEXP, SEXP Sigma_0SEXP, SEXP muSEXP, SEXP Sigma_ULASEXP, SEXP MSEXP, SEXP which_itersSEXP, SEXP hSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::VectorXd>& >::type mu_0(mu_0SEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::SparseMatrix<double>>& >::type Sigma_0(Sigma_0SEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::VectorXd>& >::type mu(muSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::MatrixXd>& >::type Sigma_ULA(Sigma_ULASEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::SparseMatrix<double>>& >::type M(MSEXP);
    Rcpp::traits::input_parameter< const Rcpp::IntegerVector& >::type which_iters(which_itersSEXP);
    Rcpp::traits::input_parameter< const double& >::type h(hSEXP);
    rcpp_result_gen = Rcpp::wrap(EvaluateW2sqULA(mu_0, Sigma_0, mu, Sigma_ULA, M, which_iters, h));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_wassersteinbound_Flapjack", (DL_FUNC) &_wassersteinbound_Flapjack, 1},
    {"_wassersteinbound_SimulateGibbs_ar1", (DL_FUNC) &_wassersteinbound_SimulateGibbs_ar1, 6},
    {"_wassersteinbound_SimulateReflMaxGibbs_ar1", (DL_FUNC) &_wassersteinbound_SimulateReflMaxGibbs_ar1, 8},
    {"_wassersteinbound_EvaluateJackknife1d", (DL_FUNC) &_wassersteinbound_EvaluateJackknife1d, 4},
    {"_wassersteinbound_RWMLogistic", (DL_FUNC) &_wassersteinbound_RWMLogistic, 3},
    {"_wassersteinbound_MALALogistic", (DL_FUNC) &_wassersteinbound_MALALogistic, 3},
    {"_wassersteinbound_SimulateULA_scaling", (DL_FUNC) &_wassersteinbound_SimulateULA_scaling, 6},
    {"_wassersteinbound_SimulateMALA_scaling", (DL_FUNC) &_wassersteinbound_SimulateMALA_scaling, 6},
    {"_wassersteinbound_SimulateReflMaxULA_scaling", (DL_FUNC) &_wassersteinbound_SimulateReflMaxULA_scaling, 8},
    {"_wassersteinbound_SimulateReflMaxMALA_scaling", (DL_FUNC) &_wassersteinbound_SimulateReflMaxMALA_scaling, 8},
    {"_wassersteinbound_RWMMixture1d", (DL_FUNC) &_wassersteinbound_RWMMixture1d, 6},
    {"_wassersteinbound_MALAMixture1d", (DL_FUNC) &_wassersteinbound_MALAMixture1d, 6},
    {"_wassersteinbound_SolveAssignmentNetworkflow", (DL_FUNC) &_wassersteinbound_SolveAssignmentNetworkflow, 1},
    {"_wassersteinbound_SetSeed_cpp", (DL_FUNC) &_wassersteinbound_SetSeed_cpp, 2},
    {"_wassersteinbound_EvaluateSquaredCost", (DL_FUNC) &_wassersteinbound_EvaluateSquaredCost, 3},
    {"_wassersteinbound_RWMStdGaussian", (DL_FUNC) &_wassersteinbound_RWMStdGaussian, 3},
    {"_wassersteinbound_MALAStdGaussian", (DL_FUNC) &_wassersteinbound_MALAStdGaussian, 3},
    {"_wassersteinbound_SampleLatentVariables", (DL_FUNC) &_wassersteinbound_SampleLatentVariables, 3},
    {"_wassersteinbound_SimulateRWM_SVM", (DL_FUNC) &_wassersteinbound_SimulateRWM_SVM, 9},
    {"_wassersteinbound_SimulateReflMaxRWM_SVM", (DL_FUNC) &_wassersteinbound_SimulateReflMaxRWM_SVM, 11},
    {"_wassersteinbound_SimulateMALA_SVM", (DL_FUNC) &_wassersteinbound_SimulateMALA_SVM, 9},
    {"_wassersteinbound_SimulateReflMaxMALA_SVM", (DL_FUNC) &_wassersteinbound_SimulateReflMaxMALA_SVM, 11},
    {"_wassersteinbound_SimulateReflMaxRWMMeetingTime_SVM", (DL_FUNC) &_wassersteinbound_SimulateReflMaxRWMMeetingTime_SVM, 9},
    {"_wassersteinbound_SimulateReflMaxMALAMeetingTime_SVM", (DL_FUNC) &_wassersteinbound_SimulateReflMaxMALAMeetingTime_SVM, 8},
    {"_wassersteinbound_EvaluateW2sq", (DL_FUNC) &_wassersteinbound_EvaluateW2sq, 4},
    {"_wassersteinbound_EvaluateW2sqGibbs", (DL_FUNC) &_wassersteinbound_EvaluateW2sqGibbs, 6},
    {"_wassersteinbound_EvaluateW2sqGibbsFull", (DL_FUNC) &_wassersteinbound_EvaluateW2sqGibbsFull, 7},
    {"_wassersteinbound_EvaluateW2sqULA", (DL_FUNC) &_wassersteinbound_EvaluateW2sqULA, 7},
    {NULL, NULL, 0}
};

RcppExport void R_init_wassersteinbound(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
